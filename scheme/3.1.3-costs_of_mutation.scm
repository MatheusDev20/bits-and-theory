;; Lost of referential transparency.

;; Two expressions made by the same computation can have diferent values.

(define (make-decrementer balance)
  (lambda (amount)
    (- balance amount)))

(define D1 (make-decrementer 25))
(define D2 (make-decrementer 25))

;; Are D1 and D2 the same?
;; Reasonable yes, cause there is no mutation or assignment happening on make-decrementer, no side Effects.

;; The procedure subtract an input by 25.
;; D1 can be substitude by D2 in any computation without changing the behaviour -> (Referential Transparency)

;; Now take a look

(define (make-simplified-withdraw balance)
  (lambda (amount)
    (set! balance (- balance amount))
    balance))

(define W1 (make-simplified-withdraw 25))
(define W2 (make-simplified-withdraw 25))

;; Are W1 and W2 the same? surely not
;; Event though they are "equal" generated by the same computation.

(W1 20) ;; 5
(W1 20) ;; -15 

;; Two same expressions called generated different values
;; Not functional programming anymore, the side effect of change balance with set! change all the behaviour
;; Functions not long can be "mathematical functions" or "pure"


(W2 20) ;; 5

;; Also, calls to W2 with the same argument to W1 does not generate the same result, lost of Referential Transparency
;; They CANNOT be replace in a expression and generate the same value.

;; CONCEPT OF ALIASES.
;; When there two names pointing to the "same" thing

(define peter-acc (make-account 100))
(define paul-acc peter-acc)

;; Withdraws or operations realized on petter-acc will make changes on paul-acc since they are alias.
;; Dangerous thing working in programing languages that allow mutation, dificult to reason about problems.


;; Pitfalls imperative programming

;; Iteration factorial
(define (factorial n)
  (define (iter product counter)
    (if (> counter n)
        product
        (iter (* counter product)
              (+ counter 1))))
  (iter 1 1))

;; Imperative Style 
(define (factorial n)
  (let ((product 1)
        (counter 1))
    (define (iter)
      (if (> counter n)
          product
          (begin (set! product (* counter product))
                 (set! counter (+ counter 1))
                 (iter))))
    (iter)))